module = ident ":" do_block

declaration = decl_statement | procedure
decl_statement = "DECLARE" decl_element { "," decl_element } ";"
decl_element = decl_fact | decl_unfact
decl_unfact = ident type [ initial ]
decl_fact = "(" ident { "," ident } ")" type [ initial ]
initial = "INITIAL" "(" number ")" 

procedure = proc_statement block_end
proc_statement= ident ":" "PROCEDURE" [ params ] [ type ]";"
params = "(" ident { "," ident } ")"

unit = cond | do_block | do_while | do_iter | statement

cond = "IF" expr "THEN" unit [ "ELSE" unit ]

do_block = "DO" ";" block_end
do_while = "DO" "WHILE" expr ";" block_end
do_iter = "DO" ident "=" expr "TO" expr [ "BY" expr ] ";" block_end

block_end = { declaration } { unit } "END" [ ident ] ";"

statement = ident "=" expr ";" | "CALL" ident [ args ]  ";" | ";"
           | "RETURN" [ expr ] ";"
args = "(" expr { "," expr } ")"

rel_op = "<" | ">" | "<=" | ">=" | "<>" | "="
expr = arithm [ rel_op  arithm ]
arithm = { term ( "+" | "-" ) } term
term = { factor ( "*" | "/") } factor
factor = [ "-" ] ( number | ident [ args ] | "(" expr ")")
