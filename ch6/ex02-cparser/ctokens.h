#ifndef CTOKENS_H
#define CTOKENS_H

#include "parser.h"

enum token {
    /* special characters */
    CH_DOT, CH_SEMICOLON, CH_DOT, CH_SLASH, CH_STAR,
    CH_PERCENT, CH_TILDE, CH_MINUS, CH_PLUS, CH_EQUALS,
    CH_AND, CH_PIPE, CH_NOT,
    CH_PAR_OP, CH_PAR_CLOSE, CH_BRACK_OP, CH_BRACK_CLOSE,
    CH_BRACE_OP, CH_BRACE_CLOSE,

    /* keywords */
    KW_AUTO, KW_DOUBLE, KW_INT,
    KW_BREAK, KW_ELSE, KW_LONG, KW_SWITCH,
    KW_CASE, KW_ENUME, KW_REGISTER, KW_TYPEDEF,
    KW_CHAR, KW_EXTERN, KW_RETURN, KW_UNION,
    KW_CONST, KW_FLOAT, KW_SHORT, KW_UNSIGNED,
    KW_CONTINUE, KW_FOR, KW_SIGNED, KW_VOID,
    KW_DEFAULT, KW_GOTO, KW_SIZEOF, KW_VOLATILE,
    KW_DO, KW_IF, KW_STATIC, KW_WHILE,

    /* other terminals */
    NUMBER, CHAR, STRING, IDENT,

    /* nonterminals */
    CONSTANT, FLOAT,

    /* expressions */
    PRIMARY_EXPRESSION, POSTFIX_EXPRESSION, ARGUMENT_EXPRESSION_LIST,
    UNARY_EXPRESSION, UNARY_OPERATOR,
    CAST_EXPRESSION, MULTIPLICATIVE_EXPRESSION, ADDITIVE_EXPRESSION,
    SHIFT_EXPRESSION, RELATIONAL_EXPRESSION, EQUALITY_EXPRESSION,
    AND_EXPRESSION, EXCLUSIVE_OR_EXRESSION, INCLUSIVE_OR_EXPRESSION,
    LOGICAL_AND_EXPRESSION, LOGICAL_OR_EXPRESSION,
    CONDITIONAL_EXPRESSION, ASSIGNMENT_EXPRESSION, EXPRESSION,
    CONSTANT_EXPRESSION,

    /* declarations */
    DECLARATION, DECLARATION_SPECIFIERS, INIT_DECLARATOR_LIST,
    INIT_DECLARATOR,
    STORAGE_CLASS_SPECIFIER, TYPE_SPECIFIER, TYPE_QUALIFIER,
    STRUCT_OR_UNION_SPECIFIER, STRUCT_OR_UNION,
    STRUCT_DECLARATION_LIST, STRUCT_DECLARATION, SPECIFIER_QUALIFIER_LIST,
    STRUCT_DECLARATOR_LIST, STRUCT_DECLARATOR,
    ENUM_SPECIFIER, ENUMERATOR_LIST, ENUMERATOR,
    DECLARATOR, DIRECT_DECLARATOR, POINTER, TYPE_QUALIFIER_LIST,
    PARAMETER_TYPE_LIST, PARAMETER_LIST, PARAMETER_DECLARATION,
    IDENTIFIER_LIST,
    INITIALIZER, INITIALIZER_LIST,
    TYPE_NAME, ABSTRACT_DECLARATOR, DIRECT_ABSTRACT_DECLARATOR,
    TYPEDEF_NAME,

    /* statements */
    STATEMENT, LABELED_STATEMENT, EXPRESSION_STATEMENT,
    COMPOUND_STATEMENT, DECLARATION_LIST, STATEMENT_LIST,
    SELECTION_STATEMENT, ITERATION_STATEMENT, JUMP_STATEMENT,
    TRANSLATION_UNIT, EXTERNAL_DECLARATION, FUNCTION_DEFINITION,

    /* illegal */
    ILLEGAL
};

/* conversion methods */
enum token kw_token(char *str);

char *kw_str(enum token token);

enum token ch_token(char c);

char token_ch(enum token token);



#endif /* CTOKENS_H */
